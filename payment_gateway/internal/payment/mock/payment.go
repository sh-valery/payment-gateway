// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payment "github.com/sh-valery/payment-gateway/payment_gateway/internal/payment"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(payment *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), payment)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(id string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockRepository) Update(id, status, statusCode, trackingID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, status, statusCode, trackingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, status, statusCode, trackingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, status, statusCode, trackingID)
}

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// GetCardByID mocks base method.
func (m *MockCardRepository) GetCardByID(id string) (*payment.CardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByID", id)
	ret0, _ := ret[0].(*payment.CardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByID indicates an expected call of GetCardByID.
func (mr *MockCardRepositoryMockRecorder) GetCardByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByID", reflect.TypeOf((*MockCardRepository)(nil).GetCardByID), id)
}

// SaveCardInfo mocks base method.
func (m *MockCardRepository) SaveCardInfo(card *payment.CardInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCardInfo", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCardInfo indicates an expected call of SaveCardInfo.
func (mr *MockCardRepositoryMockRecorder) SaveCardInfo(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCardInfo", reflect.TypeOf((*MockCardRepository)(nil).SaveCardInfo), card)
}

// MockUUIDGenerator is a mock of UUIDGenerator interface.
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator.
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance.
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockUUIDGenerator) New() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(string)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockUUIDGeneratorMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUUIDGenerator)(nil).New))
}

// MockCardProcessor is a mock of CardProcessor interface.
type MockCardProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockCardProcessorMockRecorder
}

// MockCardProcessorMockRecorder is the mock recorder for MockCardProcessor.
type MockCardProcessorMockRecorder struct {
	mock *MockCardProcessor
}

// NewMockCardProcessor creates a new mock instance.
func NewMockCardProcessor(ctrl *gomock.Controller) *MockCardProcessor {
	mock := &MockCardProcessor{ctrl: ctrl}
	mock.recorder = &MockCardProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardProcessor) EXPECT() *MockCardProcessorMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockCardProcessor) Deposit(ctx context.Context, payment *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockCardProcessorMockRecorder) Deposit(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockCardProcessor)(nil).Deposit), ctx, payment)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetPaymentDetails mocks base method.
func (m *MockService) GetPaymentDetails(id, merchantID string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentDetails", id, merchantID)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentDetails indicates an expected call of GetPaymentDetails.
func (mr *MockServiceMockRecorder) GetPaymentDetails(id, merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentDetails", reflect.TypeOf((*MockService)(nil).GetPaymentDetails), id, merchantID)
}

// ProcessPayment mocks base method.
func (m *MockService) ProcessPayment(payment *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockServiceMockRecorder) ProcessPayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockService)(nil).ProcessPayment), payment)
}
